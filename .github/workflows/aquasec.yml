name: Insecure Bank App 
on:
  push:
    branches:
      - main
  pull_request:
    branches: 
      - main
      # comment
      
env:
   DOCKER_REPOSITORY: aquasaemea # name of Docker Hub ID
   IMAGE_NAME: insecure-bank-andres
   IMAGE_TAG: ${{ github.run_number }} # $GITHUB_RUN_NUMBER
      
jobs:
  CI-Code:
    runs-on: ubuntu-20.04
    steps:
    
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Setup pipeline enforcer
        uses: aquasecurity/pipeline-enforcer-action@v1.0.0
        with:
          aqua-key: ${{ secrets.AQUA_KEY }}
          aqua-secret: ${{ secrets.AQUA_SECRET }}
          
      - name: Aqua code scanning(SCA,IaC and SAST)
        uses: docker://aquasec/aqua-scanner
        with:
          args: trivy fs --security-checks config,vuln,secret --sast .
          # To customize which severities to scan for, add the following flag: --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          # To enable SAST scanning, add: --sast
          # To enable npm/dotnet non-lock file scanning, add: --package-json / --dotnet-proj
        env:
          AQUA_KEY: ${{ secrets.AQUA_KEY }}
          AQUA_SECRET: ${{ secrets.AQUA_SECRET }}
          GITHUB_TOKEN: ${{ github.token }}
          TRIVY_RUN_AS_PLUGIN: 'aqua'
          
  CI-Build:
    needs: CI-Code
    runs-on: ubuntu-20.04
    steps:   
   
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Setup pipeline enforcer
        uses: aquasecurity/pipeline-enforcer-action@v1.0.0
        with:
          aqua-key: ${{ secrets.AQUA_KEY }}
          aqua-secret: ${{ secrets.AQUA_SECRET }}
  
      - name: Build application
        run: echo Application has been succesfully built 
        
      #https://github.com/marketplace/actions/build-and-push-docker-images
      #https://docs.docker.com/build/ci/github-actions/test-before-push/
      #- name: Set up Docker Buildx
      #  uses: docker/setup-buildx-action@v2
  
      - name: Build and push the Docker image
        uses: docker/build-push-action@v4
        with:
          tags: |
            $DOCKER_REPOSITORY/$IMAGE_NAME:latest
            $DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG
          
      #- name: Build docker image
      #  run: sudo docker build -t aquasaemea/insecure-bank-andres:${{ github.sha }} .
        
      - name: Login to Aqua Registry
        uses: docker/login-action@v1
        with:
          registry: registry.aquasec.com
          username: ${{ secrets.AQUA_REGISTRY_USERNAME }}
          password: ${{ secrets.AQUA_REGISTRY_PASS }}
          
      - name: Scanning container image
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock registry.aquasec.com/scanner:2022.4 scan --register --registry "CI/CD_andres_images" --host ${{ secrets.AQUA_HOST }} --local $DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG --token ${{ secrets.AQUA_TOKEN }} --layer-vulnerabilities --no-verify --html > .github/workflows/scan-output.html
      # -e BUILD_JOB_NAME=$CI_JOB_NAME -e BUILD_URL=$CI_JOB_URL -e BUILD_NUMBER=$CI_JOB_ID
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push the Docker image
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
            $DOCKER_REPOSITORY/$IMAGE_NAME:latest
            $DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG
          #cache-from: type=gha
          #cache-to: type=gha,mode=max
          
      #- name: Docker Login & Push
      #  run: |
      #    docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
      #    docker push andresguisado/insecure-bank-app:${{ github.sha }} 
      # - name: Login to Docker Hub
      #   run: |
      #     echo "${{ secrets.DOCKER_REPOSITORY_PASSWORD }}" | docker login -u $DOCKER_REPOSITORY --password-stdin
      
      - name: SBOM Generation
        run: |
          export BILLY_SERVER=https://billy.codesec.aquasec.com
          curl -sLo install.sh download.codesec.aquasec.com/billy/install.sh
          curl -sLo install.sh.checksum https://github.com/argonsecurity/releases/releases/latest/download/install.sh.checksum
          if ! cat install.sh.checksum | sha256sum ; then
          echo "install.sh checksum failed"
          exit 1
          fi
          BINDIR="." sh install.sh
          rm install.sh install.sh.checksum
          ./billy generate \
            --access-token "${{ github.token }}" \
            --aqua-key "${{ secrets.AQUA_KEY }}" \
            --aqua-secret "${{ secrets.AQUA_SECRET }}" \
            --artifact-path "aquasaemea/insecure-bank-andres:${{ github.sha }}"

            # The docker image name:tag of the newly built image
            # --artifact-path "my-image-name:${{ env.tag-version }}" 
            # OR the path to the root folder of your project. I.e my-repo/my-app 
            ## --artifact-path "${{env.MY_APP_ROOT}}"
            
  CD-Deploy_to_dev:
    #if: github.ref == 'refs/heads/development'
    needs: CI-Build
    runs-on: ubuntu-20.04
    steps:   
    
     - name: Setup pipeline enforcer
       uses: aquasecurity/pipeline-enforcer-action@v1.0.0
       with:
          aqua-key: ${{ secrets.AQUA_KEY }}
          aqua-secret: ${{ secrets.AQUA_SECRET }}
          
     #https://github.com/marketplace/actions/kubernetes-set-context     
     - name: Setting K8s context
       uses: azure/k8s-set-context@v2
       with:
          method: service-account
          k8s-url: https://emea-aguisado-test-dns-f0e6f17b.hcp.westeurope.azmk8s.io:443
          k8s-secret: ${{ secrets.KUBERNETES_SECRET }}
          
     - name: Checkout code
       uses: actions/checkout@v2
       
     - name: Deploying to Dev
       uses: azure/k8s-deploy@v4 
       with:
          namespace: ag-dev
          manifests: |
            manifests/dev/deployment.yaml
            manifests/dev/service.yaml
          #kubernetes/ingress.yaml
          images: |
            $DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG
            
  CD-Deploy_to_stagging:
    #if: github.ref == 'refs/heads/stagging'
    needs: CD-Deploy_to_dev
    runs-on: ubuntu-20.04      
    steps:   
    
     - name: Setup pipeline enforcer
       uses: aquasecurity/pipeline-enforcer-action@v1.0.0
       with:
          aqua-key: ${{ secrets.AQUA_KEY }}
          aqua-secret: ${{ secrets.AQUA_SECRET }}
          
     - name: Setting K8s context
       uses: azure/k8s-set-context@v3 
       with:
          method: service-account
          k8s-url: https://emea-aguisado-test-dns-f0e6f17b.hcp.westeurope.azmk8s.io:443
          k8s-secret: ${{ secrets.KUBERNETES_SECRET }}
          
     - name: Checkout code
       uses: actions/checkout@v2
       
     - name: Deploying to stagging
       uses: azure/k8s-deploy@v4 
       with:
          namespace: ag-stag
          manifests: |
            manifests/dev/deployment.yaml
            manifests/dev/service.yaml
          #kubernetes/ingress.yaml
          images: |
            $DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG
            
#https://nicwortel.nl/blog/2022/continuous-deployment-to-kubernetes-with-github-actions
#https://nicwortel.nl/blog/2020/simple-kubernetes-deployment-versioning
