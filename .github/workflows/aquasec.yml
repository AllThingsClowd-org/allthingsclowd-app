name: Insecure Bank App 
on:
  push:
    branches:
      - main
  pull_request:
    branches: 
      - main
      # comment
jobs:
  Build:
    name: Checkout
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup pipeline enforcer
        uses: aquasecurity/pipeline-enforcer-action@v1.0.0
        with:
          aqua-key: ${{ secrets.AQUA_KEY }}
          aqua-secret: ${{ secrets.AQUA_SECRET }}
      - name: Aqua code scanning(SCA,IaC and SAST)
        uses: docker://aquasec/aqua-scanner
        with:
          args: trivy fs --security-checks config,vuln,secret --sast .
          # To customize which severities to scan for, add the following flag: --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          # To enable SAST scanning, add: --sast
          # To enable npm/dotnet non-lock file scanning, add: --package-json / --dotnet-proj
        env:
          AQUA_KEY: ${{ secrets.AQUA_KEY }}
          AQUA_SECRET: ${{ secrets.AQUA_SECRET }}
          GITHUB_TOKEN: ${{ github.token }}
          TRIVY_RUN_AS_PLUGIN: 'aqua'
      - name: Build docker image
        run: sudo docker build -t andresguisado/insecure-bank-app:${{ github.sha }} .
      - name: Login to Aqua Registry
        uses: docker/login-action@v1
        with:
          registry: registry.aquasec.com
          username: ${{ secrets.AQUA_REGISTRY_USERNAME }}
          password: ${{ secrets.AQUA_REGISTRY_PASS }}
      - name: Scanning container image
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock registry.aquasec.com/scanner:2022.4 scan --register --registry "CI/CD_andres_images" --host ${{ secrets.AQUA_HOST }} --local andresguisado/insecure-bank-app:${{ github.sha }} --token ${{ secrets.AQUA_TOKEN }} --layer-vulnerabilities --no-verify --html > .github/workflows/scan-output.html
      # -e BUILD_JOB_NAME=$CI_JOB_NAME -e BUILD_URL=$CI_JOB_URL -e BUILD_NUMBER=$CI_JOB_ID
      - name: Docker Login & Push
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
          docker push andresguisado/insecure-bank-app:${{ github.sha }}  
      - name: SBOM Generation
        run: |
          export BILLY_SERVER=https://billy.codesec.aquasec.com
          curl -sLo install.sh download.codesec.aquasec.com/billy/install.sh
          curl -sLo install.sh.checksum https://github.com/argonsecurity/releases/releases/latest/download/install.sh.checksum
          if ! cat install.sh.checksum | sha256sum ; then
          echo "install.sh checksum failed"
          exit 1
          fi
          BINDIR="." sh install.sh
          rm install.sh install.sh.checksum
          ./billy generate \
            --access-token "${{ github.token }}" \
            --aqua-key "${{ secrets.AQUA_KEY }}" \
            --aqua-secret "${{ secrets.AQUA_SECRET }}" \
            --artifact-path "andresguisado/insecure-bank-app:${{ github.sha }}"

            # The docker image name:tag of the newly built image
            # --artifact-path "my-image-name:${{ env.tag-version }}" 
            # OR the path to the root folder of your project. I.e my-repo/my-app 
            ## --artifact-path "${{env.MY_APP_ROOT}}"
  Deploying_to_dev:
    needs: Build
    runs-on: ubuntu-20.04
    steps:   
     - name: Deploying to Dev
       run: |
          kubectl config set-cluster emea-aguisado-aks01 --server="${K8S_SERVER}"
          kubectl config set clusters.emea-aguisado-aks01.certificate-authority-data ${K8S_CERTIFICATE_AUTHORITY_DATA}
          kubectl config set-credentials clusterAdmin_emea-uk-aguisado-01_emea-aguisado-aks01 --token="${K8S_TOKEN}"
          kubectl config set-context default --cluster=emea-aguisado-aks01 --user=clusterAdmin_emea-uk-aguisado-01_emea-aguisado-aks01
          kubectl config use-context default
          kubectl apply -f manifests/dev/deployment.yaml
          kubectl apply -f manifests/dev/service.yaml
         #- sed -i "s/<VERSION>/${CI_COMMIT_SHORT_SHA}/g" deployment.yaml       
  Deploying_to_stagging:
    needs: Deploying_to_dev
    runs-on: ubuntu-20.04
    steps:   
     - name: Deploying to Dev
       run: |
          kubectl config set-cluster emea-aguisado-aks01 --server="${K8S_SERVER}"
          kubectl config set clusters.emea-aguisado-aks01.certificate-authority-data ${K8S_CERTIFICATE_AUTHORITY_DATA}
          kubectl config set-credentials clusterAdmin_emea-uk-aguisado-01_emea-aguisado-aks01 --token="${K8S_TOKEN}"
          kubectl config set-context default --cluster=emea-aguisado-aks01 --user=clusterAdmin_emea-uk-aguisado-01_emea-aguisado-aks01
          kubectl config use-context default
          kubectl apply -f manifests/dev/deployment.yaml
          kubectl apply -f manifests/dev/service.yaml
         #- sed -i "s/<VERSION>/${CI_COMMIT_SHORT_SHA}/g" deployment.yaml
     
